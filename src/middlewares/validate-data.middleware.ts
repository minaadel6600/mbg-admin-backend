import { Response, NextFunction } from "express";
import HttpError from "../models/error.model";
import IRequest from "../interfaces/i-request";

const dataValidator = (dataSchema: any) => {
  return async (req: IRequest, res: Response, next: NextFunction) => {
    try {
      if (!req.body) {
        return res.status(400).send({ message: "Missing request body!" });
      }

      const { params, body, query } = dataSchema;

      // the validateAsync method is built into Joi
      if (body) await body.validateAsync(req.body);

      // to validate the params
      if (params) await params.validateAsync(req.params);

      // to validate the query string
      if (query) await query.validateAsync(req.params);

      next();
    } catch (e: any) {
      // if validation fails we send the message generated by Joi
      next(new HttpError(400, e.message));
    }
  };
};

export default dataValidator;
